<?php

$begin = hrtime(true);

try {
    if (version_compare(PHP_VERSION, '7.3.0') < 0) {
        die("Exakat requires PHP 7.3 or more recent to run : ".PHP_VERSION." provided, located in {$_ENV[_]}. \n");
    }

    register_shutdown_function(function () {
        $error = error_get_last();
        if(null !== $error)
        {
            if (substr($error['message'], 0, 14) === 'Allowed memory') {
                print $error['message'];
                if (ini_get('memory_limit') !== -1) {
                    print "\nConsider raising your memory_limit in php.ini, even set it to -1.\n";
                }
            } elseif (substr($error['message'], 0, 22) === 'Maximum execution time') {
                print $error['message'];
            }
        }
    });

    $isPhar = class_exists('\\Phar') && phar::running();

    if(empty($isPhar)){
        require __DIR__ . '/library/helpers.php';
        require __DIR__ . '/library/Exakat/Autoload/Autoload.php';
    } else {
        require phar::running() . '/library/helpers.php';
        require phar::running() . '/library/Exakat/Autoload/Autoload.php';
    }

    $autoload = new \Exakat\Autoload\Autoload();
    $autoload->registerAutoload();

    // autoload for composer installation
    if (file_exists(dirname(__DIR__, 2) . '/autoload.php')) {
        require dirname(__DIR__, 2) . '/autoload.php';
    }

    // autoload for source code
    if (file_exists(__DIR__ . '/vendor/autoload.php')) {
        require __DIR__ . '/vendor/autoload.php';
    }

    $config = exakat('config');

    global $VERBOSE;
    $VERBOSE = $config->verbose;

    $exakat = new \Exakat\Exakat();
    $exakat->execute();
} catch (\Exception $e) {
    if($isPhar === false){
        print $e->getMessage();
    } else {
        print "\nError : " . $e->getMessage() . '
on file ' . $e->getFile() . '
on line ' . $e->getLine() . "\n\n";

    }
}


function debug0($debug, $title = false, $exit = false){
	debug2_header('DEBUG', $title);
	debug2_body($debug);
	debug2_footer($exit, false);
}

function debug1($debug, $title = false, $exit = false){
	debug2_header('DEBUG', $title);
	debug2_body($debug);
	debug2_footer($exit, 3);
}

function debug2($debug, $title = false, $exit = false){
	debug2_header('DEBUG 2', $title);
	debug2_body($debug);
	debug2_footer($exit, 0);
}

function reflect($object, $method = false, $exit = false){
	$class = new \ReflectionClass($object);

	$debug = [
		'class       '   => $class->getShortName(),
		'namespace   '   => $class->getNamespaceName(),
		'full_name   '   => $class->getName(),
		'file        '   => str_replace('/home/vagrant/code/', '', $class->getFileName()),
		'constructor '   => '',
		'type        '   => '',
		'instantiable'   => $class->isInstantiable(),
		'user_defined'   => $class->isUserDefined(),
		'size        '   => $class->getStartLine() . ' => ' .  $class->getEndLine(),
		// 'doc_comment' => $class->getDocComment(),
		'method'         => [],
		'parents'        => [],
		'traits'         => $class->getTraitNames(),
		'properties'     => [],
		'methods'        => [],
	];

	if($class->isAbstract()){
		$debug['type        '] = 'Abstract';
	}
	if($class->isInterface()){
		$debug['type        '] = 'Interface';
	}
	if($class->isInternal()){
		$debug['type        '] = 'Internal';
	}
	if($class->isTrait()){
		$debug['type        '] = 'Trait';
	}

	if(!empty($method)){
		$debug['method'] = [
			'method     ' => $method,
			'parameters ' => array_column($class->getMethod($method)->getParameters(), 'name'),
			'doc_comment' => $class->getMethod($method)->getDocComment(),
			'toString   ' => "\n" . $class->getMethod($method)->__toString(),
		];
	}

	if(isset($class->getParentClass()->name)){
		$debug['parents'] = get_class_parents($class->getParentClass()->name, [$class->getParentClass()->name]);
	}

	if(isset($class->getConstructor()->name)){
		$debug['constructor '] = $class->getConstructor()->name;
	}

	if(isset($class->getConstructor()->class)){
		$constructor = new \ReflectionClass($class->getConstructor()->class);

		$debug['constructor ']     .= ' => ' . $class->getConstructor()->class
			. ' => ' . str_replace('/home/vagrant/code/', '', $constructor->getFileName());
	}

	foreach ($class->getProperties() as $index => $property) {
		if(isset($property->name)){
			$debug['properties'][$index] = $property->name;
		}

		if(isset($property->class)){
			$debug['properties'][$index] .= ' => ' . $property->class;
		}
	}

	foreach ($class->getMethods() as $index => $method) {
		if(isset($method->name)){
			$debug['methods'][$index] = $method->name;
		}

		if(isset($property->class)){
			$debug['methods'][$index] .= ' => ' . $method->class;
		}
	}

	$debug['parents']    = empty($debug['parents'])    ? '' : $debug['parents'];
	$debug['properties'] = empty($debug['properties']) ? '' : $debug['properties'];
	$debug['methods']    = empty($debug['methods'])    ? '' : $debug['methods'];
	$debug['method']     = empty($debug['method'])     ? '' : $debug['method'];

	sort($debug['traits']);
	sort($debug['properties']);
	sort($debug['methods']);

	debug2_header('REFLECT', $class->getName());
	debug2_body($debug);
	debug2_footer($exit, 3);
}

function get_class_parents($constructor, $anterior = []){
	$class = new \ReflectionClass($constructor);

	if(!isset($class->getParentClass()->name)){
		return $anterior;
	}

	$anterior[] = $class->getParentClass()->name;

	return get_class_parents($class->getParentClass()->name, $anterior, true);
}

function debug2_header($function, $title){
	echo "\n<pre style='position: relative; z-index: 99999; overflow: visible;'>";
	echo "============================ {$function} OFICIAL ==========================\n";

	if($title){
		$title   = \strtoupper($title);
		$tamanho = \strlen ($title);
		$tabs    = \str_repeat('&nbsp;', (70 - $tamanho) / 2);
		echo $tabs . $title . "\n\n";
	}
}

function debug2_body($debug){
	if(\is_array($debug) || \is_object($debug)){
		echo \htmlentities(\print_r($debug, true));
	}elseif(\is_string($debug)){
		echo "string(" . \strlen($debug) . ") \"" . \htmlentities($debug) . "\"\n";
	}else{
		\var_dump($debug);
	}
}

function debug2_footer($exit = false, $limit = 0){

	if($limit !== false){
		echo "\n";
		\debug_print_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, $limit);
	}
	echo "\n</pre>";

	if($exit){
		exit;
	}
}



?>